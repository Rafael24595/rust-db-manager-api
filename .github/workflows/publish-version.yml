name: Publish Version

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Build
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose
      
  create_branch:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Create and push new branch
      env:
        GITHUB_TOKEN: ${{ secrets.RUSTDB_TOKEN }}
      run: |
        # Extract project version from Cargo.toml
        PROJECT_VERSION=$(grep '^version' Cargo.toml | sed -E 's/version = "(.*)"/\1/')
        echo "Version extracted: $PROJECT_VERSION"
        
        # Configure Git
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'

        if git ls-remote --exit-code --heads https://@github.com/${{ github.repository }}.git "$PROJECT_VERSION"; then
          echo "Branch $PROJECT_VERSION already exists. Failing job."
          exit 1
        fi
        
        # Create and push new branch
        git checkout -b "$PROJECT_VERSION"
        git remote set-url origin https://x-access-token:"$GITHUB_TOKEN"@github.com/${{ github.repository }}.git
        git push origin "$PROJECT_VERSION"

  push_image:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Extract version from Cargo.toml
      id: cargo_version
      run: |
        VERSION=$(grep '^version' Cargo.toml | sed -E 's/version = "(.*)"/\1/')
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USER }}/rust-db-manager-api:${{ env.VERSION }}
